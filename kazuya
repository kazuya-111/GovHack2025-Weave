{
  "name": "web-app",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "typescript": "^5.2.0",
    "vite": "^5.0.0"
  }
}
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
});
VITE_API_BASE_URL=https://your-flarum.example.com
VITE_TRANSLATE_API_URL=https://your-translate.example.com
import axios from 'axios';

export const api = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
  headers: { 'Content-Type': 'application/json' }
});

export function setAuthToken(token?: string) {
  if (token) api.defaults.headers.Authorization = `Token ${token}`;
  else delete api.defaults.headers.Authorization;
}
import { api, setAuthToken } from './client';

export async function login(identifier: string, password: string) {
  const { data } = await api.post('/api/token', {
    identification: identifier,
    password
  });
  setAuthToken(data.token);
  return data.token;
}

export async function getDiscussions() {
  const { data } = await api.get('/api/discussions');
  return data;
}

export async function getPosts(discussionId: string) {
  const { data } = await api.get('/api/posts', {
    params: { 'filter[discussion]': discussionId }
  });
  return data;
}

export async function createDiscussion(title: string, content: string) {
  const payload = {
    data: {
      type: 'discussions',
      attributes: { title }
    }
  };
  const res = await api.post('/api/discussions', payload);
  const discId = res.data.data.id;
  await api.post('/api/posts', {
    data: {
      type: 'posts',
      attributes: { content },
      relationships: {
        discussion: { data: { type: 'discussions', id: discId } }
      }
    }
  });
  return discId;
}
export async function translate(text: string, targetLang: string): Promise<string> {
  const url = import.meta.env.VITE_TRANSLATE_API_URL;
  if (!url) return text;
  try {
    const res = await fetch(`${url}/translate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text, targetLang })
    });
    const data = await res.json();
    return data.translated ?? text;
  } catch {
    return text;
  }
}
import React from 'react';
import { Link } from 'react-router-dom';

export default function TopicItem({ id, title, excerpt }: { id: string; title: string; excerpt?: string }) {
  return (
    <div className="border-b py-2">
      <Link to={`/topic/${id}`} className="font-semibold text-blue-600">
        {title}
      </Link>
      {excerpt && <p className="text-gray-600 text-sm">{excerpt}</p>}
    </div>
  );
}
import React, { useEffect, useState } from 'react';
import { getDiscussions } from '../api/flarum';
import TopicItem from '../components/TopicItem';
import { Link } from 'react-router-dom';

export default function TopicList() {
  const [topics, setTopics] = useState<any[]>([]);

  useEffect(() => {
    (async () => {
      const data = await getDiscussions();
      setTopics(data.data || []);
    })();
  }, []);

  return (
    <div className="p-4">
      <div className="flex gap-2 mb-4">
        <Link to="/create" className="bg-blue-500 text-white px-3 py-1 rounded">Create Topic</Link>
        <Link to="/news" className="bg-gray-200 px-3 py-1 rounded">News</Link>
        <Link to="/events" className="bg-gray-200 px-3 py-1 rounded">Events</Link>
      </div>
      {topics.map(t => (
        <TopicItem key={t.id} id={t.id} title={t.attributes?.title} excerpt={t.attributes?.excerpt} />
      ))}
    </div>
  );
}
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { getPosts } from '../api/flarum';
import { translate } from '../utils/translate';

export default function TopicDetail() {
  const { id } = useParams();
  const [posts, setPosts] = useState<any[]>([]);
  const [lang, setLang] = useState('en');
  const [translated, setTranslated] = useState(false);

  useEffect(() => {
    (async () => {
      if (id) {
        const data = await getPosts(id);
        setPosts(data.data || []);
      }
    })();
  }, [id]);

  const handleTranslate = async () => {
    setTranslated(true);
    const updated = await Promise.all(
      posts.map(async p => {
        const content = p.attributes?.contentPlain || p.attributes?.content || '';
        const t = await translate(content, lang);
        return { ...p, _translated: t };
      })
    );
    setPosts(updated);
  };

  return (
    <div className="p-4">
      <div className="flex gap-2 mb-2">
        <button onClick={() => setLang('en')}>EN</button>
        <button onClick={() => setLang('ja')}>JA</button>
        <button onClick={() => setLang('zh')}>ZH</button>
        <button onClick={handleTranslate}>{translated ? 'Refresh' : 'Translate'}</button>
      </div>
      {posts.map(p => (
        <div key={p.id} className="border-b py-2">
          <p>{translated && p._translated ? p._translated : (p.attributes?.contentPlain || p.attributes?.content)}</p>
        </div>
      ))}
    </div>
  );
}
import React, { useState } from 'react';
import { createDiscussion } from '../api/flarum';
import { useNavigate } from 'react-router-dom';

export default function CreateTopic() {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const navigate = useNavigate();

  const submit = async () => {
    if (!title || !content) return alert('Title and content required');
    const id = await createDiscussion(title, content);
    navigate(`/topic/${id}`);
  };

  return (
    <div className="p-4">
      <input value={title} onChange={e => setTitle(e.target.value)} placeholder="Title" className="border p-2 w-full mb-2" />
      <textarea value={content} onChange={e => setContent(e.target.value)} placeholder="Content" className="border p-2

